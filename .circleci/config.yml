# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

orbs:
  newman: postman/newman@0.0.2
  win: circleci/windows@5.0
  node: circleci/node@5.0.3

commands:
  install-node:
    steps:
      - checkout
      - node/install:
          install-yarn: true
          node-version: '16.13'
      - run: node --version
  
  install-npm:
    steps:
      - checkout
      - run: sudo npm install npm@latest
      - node/install-packages:
          cache-path: ~/project/node_modules
          
      - run:
          name: Newman setup  
          command: |
            npm install -g newman 
            npm install -g newman-reporter-htmlextra

      - run: npm list -g


# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  say-hello:
    # Specify the execution environment. You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
    # See: https://circleci.com/docs/2.0/configuration-reference/#docker-machine-macos-windows-executor
    docker:
      - image: cimg/base:stable
    # Add steps to the job
    # See: https://circleci.com/docs/2.0/configuration-reference/#steps
    steps:
      - checkout
      - run:
          name: "Say hello"
          command: "echo Hello, World!"

  build:
    executor: newman/postman-newman-docker
    steps:
      - checkout
      - run:
          name: Day2_Collection
          command: 
            echo "Run Day2 Collection"

      - newman/newman-run:
          collection: ./'Day2 Collections and environments'/02Collections_and_environments.postman_collection.json
          environment: ./'Day2 Collections and environments'/02Environment.postman_environment.json

      - run:
          name: Day3_Collection
          command: 
            echo "Run Day3 Collection"

      - newman/newman-run:
          collection: ./'Day3 Add request details'/03Add_Request_details.postman_collection.json
          environment: ./'Day3 Add request details'/03Environment.postman_environment.json

      - run:
          name: Day4_Collection
          command: 
            echo "Run Day4 Collection"

      - newman/newman-run:
          collection: ./'Day4 Authorization'/04Authorization.postman_collection.json
          environment: ./'Day4 Authorization'/04Environment.postman_environment.json

      - run:
          name: Day5_Collection
          command: 
            echo "Run Day5 Collection"

      - newman/newman-run:
          collection: ./'Day5 Variables'/05Environment.postman_environment.json
          environment: ./'Day5 Variables'/05Variables.postman_collection.json

      - run:
          name: Day7_Collection
          command: 
            echo "Run Day7 Collection"

      - newman/newman-run:
          collection: ./Day7Debugging/07Debugging.postman_collection.json
          environment: ./Day7Debugging/07Environment.postman_environment.json

      - run:
          name: Day8_Collection
          command: 
            echo "Run Day8 Collection"

      - newman/newman-run:
          collection: ./'Day8 Run a collection'/08Run_a_collection.postman_collection.json
          environment: ./'Day8 Run a collection'/08Environment.postman_environment.json

      - run:
          name: Day9_Collection
          command: 
            echo "Run Day9 Collection"

      - newman/newman-run:
          collection: ./'Day9 Scripting'/09Scripting.postman_collection.json
          environment: ./'Day9 Scripting'/09Environment.postman_environment.json

      - run:
          name: Day10_Collection
          command: 
            echo "Run Day10 Collection"

      - newman/newman-run:
          collection: ./'Day10 Mock services'/10Mock_services.postman_collection.json
          environment: ./'Day10 Mock services'/10Environment.postman_environment.json
          
      - run:
          name: Day11_Collection
          command: 
            echo "Run Day11 Collection"

      - newman/newman-run:
          collection: ./'Day11 Monitoring'/11Monitoring.postman_collection.json
          environment: ./'Day11 Monitoring'/11Environment.postman_environment.json

      - run:
          name: Day12_Collection
          command: 
            echo "Run Day12 Collection"

      - newman/newman-run:
          collection: ./'Day12 Postman API'/'12Postman API.postman_collection.json'
          environment: ./'Day12 Postman API'/12Environment.postman_environment.json
          
     # - run:
         # name: Day13_Collection
         # command: 
         #   echo "Run Day13 Collection"

     # - newman/newman-run:
         # collection: ./'Day13 Newman'/13Newman.postman_collection.json
         # environment: ./'Day13 Newman'/13Environment.postman_environment.json

      #- run:
          #name: Day14_Collection
          #command: 
          #  echo "Run Day14 Collection"

      #- newman/newman-run:
          #collection: ./'Day10 Mock services'/10Mock_services.postman_collection.json
          #environment: ./'Day10 Mock services'/10Environment.postman_environment.json

      - run:
          name: Day17_Collection
          command: 
            echo "Run Day17 Collection"

      - newman/newman-run:
          collection: ./'Day17 Visualizations'/17Visualizations.postman_collection.json
          environment: ./'Day17 Visualizations'/17Environment.postman_environment.json

      - run:
          name: Day18_Collection
          command: 
            echo "Run Day18 Collection"

      - newman/newman-run:
          collection: ./'Day18 APISpecifications'/18APISpecifications.postman_collection.json
          environment: ./'Day18 APISpecifications'/18Environment.postman_environment.json

      - run:
          name: Day20_Collection
          command: 
            echo "Run Day20 Collection"

      - newman/newman-run:
          collection: ./'Day20 Documentation'/20Documentation.postman_collection.json
          environment: ./'Day20 Documentation'/20Environment.postman_environment.json
          
      #- run:
      #    name: Day24_Collection
      #    command: 
      #      echo "Run Day24 Collection"

      #- newman/newman-run:
      #    collection: ./'Day24 Using libraries'/'24Using libraries.postman_collection.json'
      #    environment: ./'Day24 Using libraries'/24Environment.postman_environment.json

      - run:
          name: Day25_Collection
          command: 
            echo "Run Day25 Collection"

      - newman/newman-run:
          collection: ./'Day25 Dynamic request bodies'/'25Dynamic request bodies.postman_collection.json'
          environment: ./'Day25 Dynamic request bodies'/25Environment.postman_environment.json
          
      - run:
          name: Day26_Collection
          command: 
            echo "Run Day26 Collection"

      - newman/newman-run:
          collection: ./'Day26 Parse HTML response'/26Parse_HTML_response.postman_collection.json
          environment: ./'Day26 Parse HTML response'/26Environment.postman_environment.json

      - run:
          name: Day27_Collection
          command: 
            echo "Run Day27 Collection"

      - newman/newman-run:
          collection: ./'Day27 Scenario testing'/27Scenario_testing.postman_collection.json
          environment: ./'Day27 Scenario testing'/27Environment.postman_environment.json


  test:
    executor: node/default
    steps:
      - checkout
      - install-node
      #- install-npm
      - run: npm --version
      - restore_cache:
          key: newman--{{ checksum "package-lock.json" }}
          
  deploy:
    executor: win/server-2022
    steps:
      - checkout
      - run:
          name: Tag Git repo
          command: |
            git config --global user.email aymar.nahum@jecorde.com
            git config --global user.name  AymarN
            git tag -a "v0.1.0" -m "Release v0.1.0" 


# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  say-hello-workflow:
    jobs:
      - say-hello

  build_test_and_deploy:
    jobs:
      - build
      - test:
          requires:
            - build
          filters:
            branches:
             only: main
      - deploy:
          requires:
            - test 
          filters:
            branches:
              only: main
